[들어가며]

인텔리제이 기준으로 작성하였습니다.

현재 페이지에서 master이라고 표현한 브랜치는 최근 main이라는 이름으로 많이 사용하고 있다고 합니다.

(master/slave 관계가 인종 차별을 떠올리게 해서 그렇다고 함)

[git 명령어 정리]

`git branch -> 현재 브랜치 확인법
git branch 이름 -> 브랜치 생성
git checkout 이름 -> 브랜치 이동
git pull origin master -> 최신상태 갱신
git merge 이름 -> 병합
git branch -d 이름 -> 로컬 브랜치 정리
git push origin --delete 이름 -> 원격 브랜치 정리
git merge --abort -> merge 이전 상태로 되돌림

git init -> 최초에 초기화 시킴
git add . -> 커밋할 파일 준비
git commit -m "first commit" -> 설명을 달아서 커밋
git branch -M main -> 브랜치 이름을 강제로 main으로 변경
git remote add origin 주소 -> 내 깃허브 주소와 연동
git push -u origin main -> main이라는 브랜치에 푸시(-u를 달면 이후에는 git push, git pull만으로 푸시 풀 가능)`

[git branch 사용법]

브랜치 생성시 checkout 되어있는 브랜치 기준으로 브랜치가 따집니다.

지금은 대부분 master branch에서 작업을 하니 아래 상황으로 보여드리겠습니다.

(상황 - master 브랜치에서 수정중 같은 페이지 내의 다른 내용을 현재 수정중인 부분보다 먼저 반영해야한다.)

해당 프로젝트 경로로 이동 (workspace에서 생성시 workspace에만 branch가 생성됨) (추가, 수정, 충돌 하나씩 만들어두기)

새로운 브랜치를 만든다.
git branch test/1
git checkout test/1
git add .
git commit -m “message1“
git push origin test/1

git checkout master (마스터 브랜치로 이동)-> test/1에 푸시한 내용이 보이지 않음.

git pull origin master → 최신상태 갱신
git branch test/2
git checkout test/2

test/2를 수정
git checkout test/1
git add .
git commit -m “message2“
git push origin test/2

test/2의 내용을 먼저 반영해보자
git checkout master (반영할 브랜치로 이동)
git merge test/2
git push origin master

병합충돌 예시
git merge test/1

병합충돌 발생 → 충돌 발생시 3-way merge tool 사용/

녹색: 추가된 코드

파란색: 수정된 코드

빨간색: 충돌난 코드

처리 후
git commit -m “최종“
git push origin master

(관리 측면에서 사용이 끝난 브랜치는 정리하는 게 맞으나, 정책에 따라 유지할 수도 있습니다.)
git branch -d test/1 → 로컬 브랜치 정리
git push origin --delete test/1 → 원격 브랜치 정리

우리 회사는 유지보수가 많은데, 브랜치를 어떻게 관리해서 유지보수시에 사용할지 이야기해보면 좋겠습니다

혼자: 로컬 브랜치 따서 작업

협업: 도움이 필요하면, 브랜치를 원격 저장소에 올려서, 하나의 브랜치를 두명이 작업

브랜치 명명규칙: 지라 이슈코드
